#!/bin/bash

# Copyright 2016 Midokura SARL
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e
set -x

FIP=<%= @fip %>
NIC=<%= @nic %>
EDGE_ROUTER=<%= @edge_router %>
VETH0_IP=<%= @veth0_ip %>
VETH1_IP=<%= @veth1_ip %>
VETH_NETWORK=<%= @veth_network %>

HOSTNAME=$(hostname)
HOST_ID=$(midonet-cli -A -e host list | grep ${HOSTNAME} | awk '{ print $2 }')
BINDING=$(midonet-cli -A -e host ${HOST_ID} list binding interface veth1)

# If interface veth1 is bound already stop the script
if [ -n "${BINDING}" ]; then
    echo "Interface veth1 is already bound to host id ${HOST_ID}" >&2
    exit 7
fi

# Create veth pair
ip link add type veth
ip link set dev veth0 up
ip link set dev veth1 up

# Create a bridge, set an IP address and attach veth0
brctl addbr uplinkbridge
brctl addif uplinkbridge veth0
ip addr add ${VETH0_IP}/30 dev uplinkbridge
ip link set dev uplinkbridge up

# Enable IPv4 forwarding
sysctl -w net.ipv4.ip_forward=1

# Route packets towards floating IP network through the bridge
ip route add ${FIP} via ${VETH1_IP}

# Create a port on the edge router and bind it to the veth pair
ROUTER_ID=$(midonet-cli -A -e router list | grep ${EDGE_ROUTER} | awk '{ print $2 }')
PORT_ID=$(midonet-cli -A -e router ${ROUTER_ID} add port address ${VETH1_IP} \
    net ${VETH_NETWORK} | cut -d ":" -f 2)
midonet-cli -e router ${ROUTER_ID} add route src 0.0.0.0/0 dst 0.0.0.0/0 \
    type normal port router ${ROUTER_ID} port ${PORT_ID} gw ${VETH0_IP}
midonet-cli -e host ${HOST_ID} add binding port router ${ROUTER_ID} \
    port ${PORT_ID} interface veth1

# Add masquerading to enable NATing
iptables -t nat -I POSTROUTING -o ${NIC} -s ${FIP} -j MASQUERADE
iptables -I FORWARD -s ${FIP} -j ACCEPT

echo "Successfully created fake uplink"
exit 0
