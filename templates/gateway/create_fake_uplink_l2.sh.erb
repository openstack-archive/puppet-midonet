#!/bin/bash

# Copyright 2016 Midokura SARL
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

exec {"add veth interface":
  path    => "/usr/bin:/usr/sbin:/sbin",
  command => "ip link add gw-veth-br type veth peer name gw-veth-mn",
  unless  => "ip l | /bin/grep -e veth0 -e veth1"
} ->

exec {"set veth0 interface up":
  path    => "/usr/bin:/usr/sbin:/sbin",
  command => "ip l set dev veth0 up"
} ->

exec {"set veth1 interface up":
  path    => "/usr/bin:/usr/sbin:/sbin",
  command => "ip l set dev veth1 up"
} ->

exec {"create uplinkbridge":
  path    => "/usr/bin:/usr/sbin:/sbin",
  command => "brctl addbr uplinkbridge",
  unless  => "ip l | /bin/grep -e uplinkbridge"
} ->

exec {"add veth to bridge":
  path    => "/usr/bin:/usr/sbin:/sbin",
  command => "brctl addif uplinkbridge veth0",
  unless  => "brctl show uplinkbridge | /bin/grep veth0"
} ->

exec {"wait for ifaces to come up":
  path    => "/usr/bin:/usr/sbin:/sbin",
  command => "sleep 3",
} ->

exec {"add ip to bridge":
  path    => "/usr/bin:/usr/sbin:/sbin",
  command => "ip addr add ${static_linux_bridge_ip_netl} dev uplinkbridge",
  unless  => "ip a | grep ${$static_linux_bridge_ip_netl}"
} ->

exec {"wait for ip to be assigned":
  path    => "/usr/bin:/usr/sbin:/sbin",
  command => "sleep 3",
} ->

exec {"set uplinkbridge interface up":
  path    => "/usr/bin:/usr/sbin:/sbin",
  command => "ip l set dev uplinkbridge up"
} ->

exec {"wait for uplinkbridge to be up":
  path    => "/usr/bin:/usr/sbin:/sbin",
  command => "sleep 3",
} ->

exec {"add route":
  path    => "/usr/bin:/usr/sbin:/sbin",
  command => "ip route add ${floating_cidr} via ${static_fake_edge_router_ip_address}",
  unless  => "ip l | /bin/grep -e uplinkbridge"
} ->

midonet-cli -e router ${ROUTER_ID} add route src 0.0.0.0/0 dst 0.0.0.0/0 \
type normal port router ${ROUTER_ID} port ${PORT_ID} gw ${VETH0_IP}

exec {"add route on midonet-cli":
  path    => "/usr/bin:/usr/sbin:/sbin",
  command => "ip route add ${floating_cidr} via ${static_fake_edge_router_ip_address}",
  unless

set -e
set -x

FIP=<%= @fip %>
NIC=<%= @nic %>
EDGE_ROUTER=<%= @edge_router %>
VETH0_IP=<%= @veth0_ip %>
VETH1_IP=<%= @veth1_ip %>
VETH_NETWORK=<%= @veth_network %>
HOSTNAME=<% @hostname %>
MASQUERADE_ON= <% @masquerade %>

HOST_ID=$(midonet-cli -A -e host list | grep ${HOSTNAME} | awk '{ print $2 }')
BINDING=$(midonet-cli -A -e host ${HOST_ID} list binding interface veth1)

# Create veth pair
if [ -z "$(ip l | /bin/grep -e veth0 -e veth)"]; then
  ip link add type veth
fi

ip link set dev veth0 up
ip link set dev veth1 up

# Create a bridge, set an IP address and attach veth0
if [-z "$(ip l | /bin/grep -e uplinkbridge)"]; then
  brctl addbr uplinkbridge
fi

if [-z "$(brctl show uplinkbridge | /bin/grep veth0)"]; then
  brctl addif uplinkbridge veth0
fi

echo "ZzZ..."
sleep 3

IP_NETNL = $(echo ${VETH_NETWORK} | cut -d'/' -f2)
if [ -z "$(ip a | grep ${VETH0_IP})"]
  ip addr add ${VETH0_IP}/$(echo ${IP_NETNL} | cut -d'/' -f2) dev uplinkbridge
fi

echo "ZzZ..."
sleep 3

ip link set dev uplinkbridge up

echo "ZzZ..."
sleep 3

# Enable IPv4 forwarding
sysctl -w net.ipv4.ip_forward=1

# Route packets towards floating IP network through the bridge
if [ -z "$(ip route | /bin/grep '${FIP} via ${VETH_1}')"]
  ip route add ${FIP} via ${VETH1_IP}
fi

# Create a port on the edge router and bind it to the veth pair
ROUTER_ID=$(midonet-cli -A -e router list | grep ${EDGE_ROUTER} | awk '{ print $2 }')
PORT_ID=$(midonet-cli -A -e router ${ROUTER_ID} port list | grep ${VETH1_IP} | cut -f 2 -d " ")

if [ -z "$(midonet-cli -A -e router ${ROUTER_ID} route list | grep 'src 0.0.0.0/0 dst 0.0.0.0/0 port ${PORT_ID}')"]; then
  midonet-cli -e router ${ROUTER_ID} add route src 0.0.0.0/0 dst 0.0.0.0/0 \
      type normal port router ${ROUTER_ID} port ${PORT_ID} gw ${VETH0_IP}
fi

#midonet-cli -e host ${HOST_ID} add binding port router ${ROUTER_ID} \
    #port ${PORT_ID} interface veth1

# Add masquerading to enable NATing
if [ "${MASQUERADE_ON} = true "]; then
  iptables -t nat -I POSTROUTING -o ${NIC} -s ${FIP} -j MASQUERADE
  iptables -I FORWARD -s ${FIP} -j ACCEPT
fi

echo "Successfully created fake uplink"
exit 0
